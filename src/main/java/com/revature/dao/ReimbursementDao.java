package com.revature.dao;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;
          
import com.revature.beans.Reimbursements;
import com.revature.util.ConnectionUtil;

public class ReimbursementDao {
	//return all reimbursements in the system
	public List<Reimbursements> getAllReimbursements(){
		PreparedStatement prepstate;
		List<Reimbursements> reimburse = new ArrayList<>();
		String sql = "select * from reimbursements";
		try(Connection conn = ConnectionUtil.getConnection()){
			prepstate = conn.prepareStatement(sql);
			ResultSet rs = prepstate.executeQuery();
			while(rs.next()) {
				int rid = rs.getInt("id");
				int eid = rs.getInt("eid");
				double amount = rs.getDouble("amount");
				double cost = rs.getDouble("cost");
				String status = rs.getString("status");
				String rtype = rs.getString("rtype");
				String description = rs.getString("descripton");                        
				
				Reimbursements r = new Reimbursements(rid, eid, cost, amount, rtype, description, status);
				reimburse.add(r);
			}
			rs.close();
			prepstate.close();
		} catch (Exception ex) {
			ex.printStackTrace();
			ex.getMessage();
		}
		return reimburse;
	}
	//returns employee specific reimbursements
	public List<Reimbursements> getMyReimbursements(int eid){
		PreparedStatement prepstate; 
		List<Reimbursements> reimburse = new ArrayList<>();
		String sql = "select * from reimburesments where eid = ?";
		try(Connection conn = ConnectionUtil.getConnection()){
			prepstate = conn.prepareStatement(sql);
			prepstate.setInt(1, eid);
			ResultSet rs = prepstate.executeQuery();
			while(rs.next()) {
				int rid = rs.getInt("id");
				double amount = rs.getDouble("amount");
				double cost = rs.getDouble("cost");
				String status = rs.getString("status");
				String rtype = rs.getString("rtype");
				String description = rs.getString("descripton");                        
				
				Reimbursements r = new Reimbursements(rid, eid, cost, amount, rtype, description, status);
				reimburse.add(r);
			}
			rs.close();
			prepstate.close();
		} catch (Exception ex){
			ex.printStackTrace();
			ex.getMessage();
		}
		return reimburse;
	}
	//return reimbursements of people who report to them
	public List<Reimbursements> getSupervisorReimbursements(int eid){
		PreparedStatement prepstate;
		List<Reimbursements> reimburse = new ArrayList<>();
		String sql = "select * from reimbursements r join employees e on e.eid = r.eid join employees emp on emp.eid = e.supervisor where e.eid=?";
		try(Connection conn = ConnectionUtil.getConnection()){
			prepstate = conn.prepareStatement(sql);
			prepstate.setInt(1,  eid);
			ResultSet rs = prepstate.executeQuery();
			while(rs.next()) {
				int rid = rs.getInt("id");
				double amount = rs.getDouble("amount");
				double cost = rs.getDouble("cost");
				String status = rs.getString("status");
				String rtype = rs.getString("rtype");
				String description = rs.getString("descripton"); 		
				
				Reimbursements r = new Reimbursements(rid, eid, cost, amount, rtype, description, status);
				reimburse.add(r);
			}	
		} catch (Exception ex) {
			ex.printStackTrace();
			ex.getMessage();
		}
		return reimburse;
	}
	public List<Reimbursements> getDeptHeadReimbursements(int eid){
		PreparedStatement prepstate;
		List<Reimbursements> reimburse = new ArrayList<>();
		String sql = "select * from reimbursements r join employees e on e.eid = r.eid join employees emp on emp.eid = e.departmenthead where e.departmenthead=?";
		try(Connection conn = ConnectionUtil.getConnection()){
			prepstate = conn.prepareStatement(sql);
			prepstate.setInt(1,  eid);
			ResultSet rs = prepstate.executeQuery();
			while(rs.next()) {
				int rid = rs.getInt("rid");
				double amount = rs.getDouble("reimbursement");
				double cost = rs.getDouble("cost");
				String status = rs.getString("status");
				String rtype = rs.getString("rtype");
				String description = rs.getString("description"); 		
				
				Reimbursements r = new Reimbursements(rid, eid, cost, amount, rtype, description, status);
				reimburse.add(r);
			}	
		} catch (Exception ex) {
			ex.printStackTrace();
			ex.getMessage();
		}
		return reimburse;
	}
	//Creating reimbursement input from user should be cost type and description 
	// rid status and reimbursement generated by system
	public void createReimbursement(int eid, double cost, String rtype, String description) {
		PreparedStatement prepstate;
		String sql = "insert into reimbursements(eid, cost, rtype, description) values (?, ?, ?, ?)";
		try(Connection conn = ConnectionUtil.getConnection()){
			prepstate = conn.prepareStatement(sql);
			prepstate.setInt(1,  eid);
			prepstate.setDouble(2, cost);
			prepstate.setString(3, rtype);
			prepstate.setString(4,  description);
			prepstate.executeQuery();
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}
	//Called when employee wishes to see stage of reimbursement
	public String[] getDetailStatus(int rid) {
		PreparedStatement prepstate;
		String sql = "select * from rstatus where rid = ?";
		String ret[] = new String[3];
		try(Connection conn =  ConnectionUtil.getConnection()){
			prepstate = conn.prepareStatement(sql);
			prepstate.setInt(1,  rid);
			ResultSet rs = prepstate.executeQuery();
			while(rs.next()) {
				String supStatus = rs.getString("dsup");
				String deptStatus = rs.getString("depthead");
				String bencoStatus = rs.getString("benco");
				ret[0] = supStatus;
				ret[1] = deptStatus;
				ret[2] = bencoStatus;
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return ret;
	}
	//If reimbursement is overlooked for more than a week it is auto approved by 
	//supervisor and dept head but not benco
	public void autoApprove(int rid) {
		CallableStatement cs;
		String sql =  "autoapprove(?)";
		try(Connection conn = ConnectionUtil.getConnection()){
			cs = conn.prepareCall(sql);
			cs.setInt(1, rid);
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}
}
